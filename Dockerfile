# Base image
FROM node:22-alpine AS base

# Step 1. Rebuild the source code only when needed
FROM base AS builder

WORKDIR /app

# First install dependencies so we can cache them
RUN apk update && apk upgrade
RUN apk add curl

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./
COPY drizzle ./drizzle
# Omit --production flag for TypeScript devDependencies
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i; \
  # Allow install without lockfile, so example works even without Node.js installed locally
  else echo "Warning: Lockfile not found. It is recommended to commit lockfiles to version control." && yarn install; \
  fi

# Now copy the rest of the app and build it
COPY . .
COPY public ./public
COPY next.config.ts .
COPY tsconfig.json .

# Add build arguments for environment variables
ARG AUTH_TRUST_HOST
ENV AUTH_TRUST_HOST=${AUTH_TRUST_HOST}
ARG BETTER_AUTH_DEBUG
ENV BETTER_AUTH_DEBUG=${BETTER_AUTH_DEBUG}
ARG BETTER_AUTH_SECRET
ENV BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
ARG BETTER_AUTH_URL
ENV BETTER_AUTH_URL=${BETTER_AUTH_URL}
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}
ARG DB_HOST
ENV DB_HOST=${DB_HOST}
ARG DB_NAME
ENV DB_NAME=${DB_NAME}
ARG DB_PASSWORD
ENV DB_PASSWORD=${DB_PASSWORD}
ARG DB_PORT
ENV DB_PORT=${DB_PORT}
ARG DB_USER
ENV DB_USER=${DB_USER}
ARG EMAIL_SMTP_HOST
ENV EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
ARG EMAIL_SMTP_PASSWORD
ENV EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
ARG EMAIL_SMTP_PORT
ENV EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
ARG EMAIL_SMTP_USER
ENV EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
ARG IGNORE_SSL_VERIFICATION
ENV IGNORE_SSL_VERIFICATION=${IGNORE_SSL_VERIFICATION}
ARG MICROSOFT_CLIENT_ID
ENV MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
ARG MICROSOFT_CLIENT_SECRET
ENV MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
ARG MICROSOFT_TENANT_ID
ENV MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
ARG NEXT_PUBLIC_APP_AUTHOR
ENV NEXT_PUBLIC_APP_AUTHOR=${NEXT_PUBLIC_APP_AUTHOR}
ARG NEXT_PUBLIC_APP_CONTACT_EMAIL
ENV NEXT_PUBLIC_APP_CONTACT_EMAIL=${NEXT_PUBLIC_APP_CONTACT_EMAIL}
ARG NEXT_PUBLIC_APP_DESCRIPTION
ENV NEXT_PUBLIC_APP_DESCRIPTION=${NEXT_PUBLIC_APP_DESCRIPTION}
ARG NEXT_PUBLIC_APP_DOMAIN
ENV NEXT_PUBLIC_APP_DOMAIN=${NEXT_PUBLIC_APP_DOMAIN}
ARG NEXT_PUBLIC_APP_LOGO
ENV NEXT_PUBLIC_APP_LOGO=${NEXT_PUBLIC_APP_LOGO}
ARG NEXT_PUBLIC_APP_NAME
ENV NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
ARG NEXT_PUBLIC_APP_REPO_URL
ENV NEXT_PUBLIC_APP_REPO_URL=${NEXT_PUBLIC_APP_REPO_URL}
ARG NEXT_PUBLIC_APP_TIMEZONE
ENV NEXT_PUBLIC_APP_TIMEZONE=${NEXT_PUBLIC_APP_TIMEZONE}
ARG NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
ARG NEXT_PUBLIC_LOG_LEVEL
ENV NEXT_PUBLIC_LOG_LEVEL=${NEXT_PUBLIC_LOG_LEVEL}
ARG NEXT_PUBLIC_SHOW_LOGGER
ENV NEXT_PUBLIC_SHOW_LOGGER=${NEXT_PUBLIC_SHOW_LOGGER}
ARG NEXT_PUBLIC_UMAMI_HOST
ENV NEXT_PUBLIC_UMAMI_HOST=${NEXT_PUBLIC_UMAMI_HOST}
ARG NEXT_PUBLIC_UMAMI_WEBSITE_ID
ENV NEXT_PUBLIC_UMAMI_WEBSITE_ID=${NEXT_PUBLIC_UMAMI_WEBSITE_ID}
ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV}
ARG NODE_TLS_REJECT_UNAUTHORIZED
ENV NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
ARG PORT
ENV PORT=${PORT}
ARG SENTRY_ANALYZE
ENV SENTRY_ANALYZE=${SENTRY_ANALYZE}
ARG SENTRY_AUTH_TOKEN
ENV SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
ARG SENTRY_CI
ENV SENTRY_CI=${SENTRY_CI}
ARG SENTRY_DSN
ENV SENTRY_DSN=${SENTRY_DSN}
ARG SENTRY_ORG
ENV SENTRY_ORG=${SENTRY_ORG}
ARG SENTRY_PROJECT
ENV SENTRY_PROJECT=${SENTRY_PROJECT}
ARG SENTRY_URL
ENV SENTRY_URL=${SENTRY_URL}
ARG SKIP_ENV_VALIDATION
ENV SKIP_ENV_VALIDATION=${SKIP_ENV_VALIDATION}
#ARG NODE_OPTIONS
#ENV NODE_OPTIONS=${NODE_OPTIONS}

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Build Next.js based on the preferred package manager
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then pnpm build; \
  else npm run build; \
  fi

# Step 2. Production image, copy all the files and run next
FROM base AS runner

WORKDIR /app

# Create a non-root user
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
# Copy the standalone output from the builder image
COPY --from=builder --chown=nextjs:nextjs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nextjs /app/.next/static ./.next/static

# Add build arguments for environment variables
ARG AUTH_TRUST_HOST
ENV AUTH_TRUST_HOST=${AUTH_TRUST_HOST}
ARG BETTER_AUTH_DEBUG
ENV BETTER_AUTH_DEBUG=${BETTER_AUTH_DEBUG}
ARG BETTER_AUTH_SECRET
ENV BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
ARG BETTER_AUTH_URL
ENV BETTER_AUTH_URL=${BETTER_AUTH_URL}
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}
ARG DB_HOST
ENV DB_HOST=${DB_HOST}
ARG DB_NAME
ENV DB_NAME=${DB_NAME}
ARG DB_PASSWORD
ENV DB_PASSWORD=${DB_PASSWORD}
ARG DB_PORT
ENV DB_PORT=${DB_PORT}
ARG DB_USER
ENV DB_USER=${DB_USER}
ARG EMAIL_SMTP_HOST
ENV EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
ARG EMAIL_SMTP_PASSWORD
ENV EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
ARG EMAIL_SMTP_PORT
ENV EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
ARG EMAIL_SMTP_USER
ENV EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
ARG IGNORE_SSL_VERIFICATION
ENV IGNORE_SSL_VERIFICATION=${IGNORE_SSL_VERIFICATION}
ARG MICROSOFT_CLIENT_ID
ENV MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
ARG MICROSOFT_CLIENT_SECRET
ENV MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
ARG MICROSOFT_TENANT_ID
ENV MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
ARG NEXT_PUBLIC_APP_AUTHOR
ENV NEXT_PUBLIC_APP_AUTHOR=${NEXT_PUBLIC_APP_AUTHOR}
ARG NEXT_PUBLIC_APP_CONTACT_EMAIL
ENV NEXT_PUBLIC_APP_CONTACT_EMAIL=${NEXT_PUBLIC_APP_CONTACT_EMAIL}
ARG NEXT_PUBLIC_APP_DESCRIPTION
ENV NEXT_PUBLIC_APP_DESCRIPTION=${NEXT_PUBLIC_APP_DESCRIPTION}
ARG NEXT_PUBLIC_APP_DOMAIN
ENV NEXT_PUBLIC_APP_DOMAIN=${NEXT_PUBLIC_APP_DOMAIN}
ARG NEXT_PUBLIC_APP_LOGO
ENV NEXT_PUBLIC_APP_LOGO=${NEXT_PUBLIC_APP_LOGO}
ARG NEXT_PUBLIC_APP_NAME
ENV NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
ARG NEXT_PUBLIC_APP_REPO_URL
ENV NEXT_PUBLIC_APP_REPO_URL=${NEXT_PUBLIC_APP_REPO_URL}
ARG NEXT_PUBLIC_APP_TIMEZONE
ENV NEXT_PUBLIC_APP_TIMEZONE=${NEXT_PUBLIC_APP_TIMEZONE}
ARG NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
ARG NEXT_PUBLIC_LOG_LEVEL
ENV NEXT_PUBLIC_LOG_LEVEL=${NEXT_PUBLIC_LOG_LEVEL}
ARG NEXT_PUBLIC_SHOW_LOGGER
ENV NEXT_PUBLIC_SHOW_LOGGER=${NEXT_PUBLIC_SHOW_LOGGER}
ARG NEXT_PUBLIC_UMAMI_HOST
ENV NEXT_PUBLIC_UMAMI_HOST=${NEXT_PUBLIC_UMAMI_HOST}
ARG NEXT_PUBLIC_UMAMI_WEBSITE_ID
ENV NEXT_PUBLIC_UMAMI_WEBSITE_ID=${NEXT_PUBLIC_UMAMI_WEBSITE_ID}
ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV}
ARG NODE_TLS_REJECT_UNAUTHORIZED
ENV NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
ARG PORT
ENV PORT=${PORT}
ARG SENTRY_ANALYZE
ENV SENTRY_ANALYZE=${SENTRY_ANALYZE}
ARG SENTRY_AUTH_TOKEN
ENV SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
ARG SENTRY_CI
ENV SENTRY_CI=${SENTRY_CI}
ARG SENTRY_DSN
ENV SENTRY_DSN=${SENTRY_DSN}
ARG SENTRY_ORG
ENV SENTRY_ORG=${SENTRY_ORG}
ARG SENTRY_PROJECT
ENV SENTRY_PROJECT=${SENTRY_PROJECT}
ARG SENTRY_URL
ENV SENTRY_URL=${SENTRY_URL}
ARG SKIP_ENV_VALIDATION
ENV SKIP_ENV_VALIDATION=${SKIP_ENV_VALIDATION}
#ARG NODE_OPTIONS
#ENV NODE_OPTIONS=${NODE_OPTIONS}

# Prepare the app for production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV HOSTNAME="0.0.0.0"

EXPOSE 3000

# Start the app
CMD ["node", "server.js"]
